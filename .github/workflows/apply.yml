on:
  issue_comment:
    types:
      - created

name: Apply

env:
  CACHIX_NAME: sos21-backend-infrastructure
  # avoid caching libguestfs-appliance because it's large and built from binary distribution
  CACHIX_PUSH_FILTER: libguestfs-appliance
  TERRAFORM_CLOUD_ORGANIZATION: sohosai
  TERRAFORM_CLOUD_WORKSPACE_NAME: sos21-backend-infrastructure

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  plan:
    runs-on: ubuntu-18.04
    if: github.event.issue.pull_request
      && github.event.comment.body == '/plan'
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/get-pull-request
        id: get-pull-request
        with:
          pull-number: ${{ github.event.issue.number }}
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - uses: ./.github/actions/check-repository-collaborator
        id: check-collaborator
        with:
          username: "${{ github.event.comment.user.login }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - run: exit 1
        if: steps.get-pull-request.outputs.base_ref != 'main'
          || steps.get-pull-request.outputs.mergeable != 'true'
          || steps.check-collaborator.outputs.is_collaborator != 'true'
      - uses: actions/checkout@v2
        with:
          ref: "${{ steps.get-pull-request.outputs.merge_commit_sha }}"
      - uses: cachix/install-nix-action@v12
      - uses: cachix/cachix-action@v10
        with:
          name: "${{ env.CACHIX_NAME }}"
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "${{ env.CACHIX_PUSH_FILTER }}"
      - run: sudo apt-get install fuse
      - name: terraform init
        uses: ./.github/actions/terraform-init
        with:
          organization: "${{ env.TERRAFORM_CLOUD_ORGANIZATION }}"
          workspace_name: "${{ env.TERRAFORM_CLOUD_WORKSPACE_NAME }}"
          token: "${{ secrets.TERRAFORM_CLOUD_TOKEN }}"
          nix-shell: true
      - name: terraform plan
        id: plan
        run: |
          set +e
          output=$(nix-shell --run 'terraform plan -no-color -out tfapply' 2>&1)
          ret=$?
          output=${output//'%'/'%25'}
          output=${output//$'\n'/'%0A'}
          output=${output//$'\r'/'%0D'}
          echo "::set-output name=output::$output"
          exit $ret
        continue-on-error: true
        env:
          TF_IN_AUTOMATION: true
          TF_VAR_sakuracloud_access_token: "${{ secrets.SAKURACLOUD_ACCESS_TOKEN }}"
          TF_VAR_sakuracloud_access_token_secret: "${{ secrets.SAKURACLOUD_ACCESS_TOKEN_SECRET }}"
          TF_VAR_ssh_public_key: "${{ secrets.SSH_PUBLIC_KEY }}"
      - uses: actions/upload-artifact@v2
        if: steps.plan.outcome == 'success'
        with:
          name: "tfapply-${{ steps.get-pull-request.outputs.merge_commit_sha }}"
          path: ./tfapply
          if-no-files-found: error
      - uses: actions/github-script@v3
        env:
          PLAN_OUTPUT: "${{ steps.plan.outputs.output }}"
          MERGE_COMMIT_SHA: "${{ steps.get-pull-request.outputs.merge_commit_sha }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const message =
              "${{ steps.plan.outcome }}" == "success"
                ? `The plan is saved for ${process.env.MERGE_COMMIT_SHA}.\nUse \`/apply\` to apply the plan and merge this PR.`
                : "Plan failed.";
            const body = `${message}
            <details><summary>Show output</summary>

            \`\`\`
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            </details>`;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
  apply:
    runs-on: ubuntu-18.04
    if: github.event.issue.pull_request
      && github.event.comment.body == '/apply'
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/get-pull-request
        id: get-pull-request
        with:
          pull-number: ${{ github.event.issue.number }}
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - uses: ./.github/actions/check-repository-collaborator
        id: check-collaborator
        with:
          username: "${{ github.event.comment.user.login }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - run: exit 1
        if: steps.get-pull-request.outputs.base_ref != 'main'
          || steps.get-pull-request.outputs.mergeable != 'true'
          || steps.check-collaborator.outputs.is_collaborator != 'true'
      - uses: actions/checkout@v2
        with:
          ref: "${{ steps.get-pull-request.outputs.merge_commit_sha }}"
      - uses: ./.github/actions/download-artifact
        id: download-tfapply
        continue-on-error: true
        with:
          name: "tfapply-${{ steps.get-pull-request.outputs.merge_commit_sha }}"
          workflow: apply.yml
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/github-script@v3
        if: steps.download-tfapply.outcome == 'failure'
        env:
          MERGE_COMMIT_SHA: "${{ steps.get-pull-request.outputs.merge_commit_sha }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const body = `No saved plan found for ${process.env.MERGE_COMMIT_SHA}.`;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
            core.setFailed(body);
      - uses: cachix/install-nix-action@v12
      - uses: cachix/cachix-action@v10
        with:
          name: "${{ env.CACHIX_NAME }}"
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "${{ env.CACHIX_PUSH_FILTER }}"
      - run: sudo apt-get install fuse
      - name: terraform init
        uses: ./.github/actions/terraform-init
        with:
          organization: "${{ env.TERRAFORM_CLOUD_ORGANIZATION }}"
          workspace_name: "${{ env.TERRAFORM_CLOUD_WORKSPACE_NAME }}"
          token: "${{ secrets.TERRAFORM_CLOUD_TOKEN }}"
          nix-shell: true
      - uses: actions/github-script@v3
        env:
          MERGE_COMMIT_SHA: "${{ steps.get-pull-request.outputs.merge_commit_sha }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Started applying ${process.env.MERGE_COMMIT_SHA}.`,
            });
      - name: terraform apply
        id: apply
        run: |
          set +e
          output=$(nix-shell --run 'terraform apply -auto-approve -no-color ./tfapply' 2>&1)
          ret=$?
          output=${output//'%'/'%25'}
          output=${output//$'\n'/'%0A'}
          output=${output//$'\r'/'%0D'}
          echo "::set-output name=output::$output"
          exit $ret
        continue-on-error: true
        env:
          TF_IN_AUTOMATION: true
          TF_VAR_sakuracloud_access_token: "${{ secrets.SAKURACLOUD_ACCESS_TOKEN }}"
          TF_VAR_sakuracloud_access_token_secret: "${{ secrets.SAKURACLOUD_ACCESS_TOKEN_SECRET }}"
          TF_VAR_ssh_public_key: "${{ secrets.SSH_PUBLIC_KEY }}"
      - uses: actions/github-script@v3
        env:
          APPLY_RESULT: "${{ steps.apply.outputs.output }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const body = `\`terraform apply\`: ${{ steps.apply.outcome }}
            <details><summary>Show result</summary>

            \`\`\`
            ${process.env.APPLY_RESULT}
            \`\`\`
            </details>`;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
      - run: exit 1
        if: steps.apply.outcome != 'success'
  merge:
    runs-on: ubuntu-18.04
    needs: apply
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
